#+TITLE: Reverse Proxy with Plex
#+AUTHOR: Artem Smaznov
#+DESCRIPTION: Testing manual reverse proxy setup with plex as actual app
#+STARTUP: overview
#+auto_tangle: t

* Working
+ [[http://localhost/app1/]] fully works
+ [[http://localhost/app2/]] fully works
+ [[http://localhost:32400]] plex fully works
+ [[http://localhost:8080]] nextcloud fully works

* Not working
+ [[http://localhost/nextcloud/]] opens with no graphics
+ [[http://localhost/plex/]] opens blank page (on startup some xml is seen) - looks similar to no graphics
+ [[http://localhost/ha/]] opens only app logo (not a container)

* Docker Compose
:PROPERTIES:
:header-args: :tangle docker-compose.yml
:END:
** Init Section
Version
#+begin_src yaml
version: '3'
#+end_src

Volumes
#+begin_src yaml
volumes:
  db:
  certs:
  acme:
  html:
#+end_src

Networks
#+begin_src yaml
networks:
  proxy-tier:
#+end_src

Start services block
#+begin_src yaml
services:
#+end_src

** Reverse Proxy
#+begin_src yaml
  proxy:
    container_name: 'reverse-proxy'
    image: nginx
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./certs:/etc/nginx/certs:z,ro
      - html:/usr/share/nginx/html:z
      - ./reverse-proxy/default.conf:/etc/nginx/conf.d/default.conf:z,ro
      - /var/run/docker.sock:/tmp/docker.sock:z,ro
    networks:
      - proxy-tier
#+end_src

** Home Assistant
#+begin_src yaml
  homeassistant:
    container_name: 'homeassistant'
    image: "ghcr.io/home-assistant/home-assistant:stable"
    restart: always
    ports:
      - 8123:8123
    volumes:
      - /home/homeassistant/config:/config
      - /etc/localtime:/etc/localtime:ro
    devices:
      - /dev/bus/usb/003/002:/dev/bus/usb/003/002
    privileged: true
    networks:
      - proxy-tier
      - default
#+end_src

** Nextcloud
*** Server
#+begin_src yaml
  nextcloud-server:
    image: nginx:alpine
    container_name: 'nextcloud-server'
    restart: always
    depends_on:
      - nextcloud-app
    ports:
      - 8080:80
    env_file:
      - secrets/domain.env
    volumes:
      - /home/nextcloud2:/var/www/html:z,ro
      - ./nextcloud/server/nginx.conf:/etc/nginx/nginx.conf:z,ro
    networks:
      - proxy-tier
      - default
#+end_src

*** App
#+begin_src yaml
  nextcloud-app:
    image: nextcloud:fpm-alpine
    container_name: 'nextcloud-app'
    restart: always
    depends_on:
      - nextcloud-db
      - nextcloud-redis
    environment:
      - MYSQL_HOST=nextcloud-db
      - REDIS_HOST=nextcloud-redis
    env_file:
      - secrets/db.env
    volumes:
      - /home/nextcloud2:/var/www/html:z
#+end_src

*** Cron
#+begin_src yaml
  nextcloud-cron:
    image: nextcloud:fpm-alpine
    container_name: 'nextcloud-cron'
    restart: always
    depends_on:
      - nextcloud-db
      - nextcloud-redis
    entrypoint: /cron.sh
    volumes:
      - /home/nextcloud2:/var/www/html:z
#+end_src

*** Database
#+begin_src yaml
  nextcloud-db:
    image: mariadb
    container_name: 'nextcloud-db'
    restart: always
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    environment:
      - MARIADB_AUTO_UPGRADE=1
      - MARIADB_DISABLE_UPGRADE_BACKUP=1
    env_file:
      - secrets/db.env
      - secrets/db-root.env
    volumes:
      - db:/var/lib/mysql:Z
#+end_src

*** Redis
#+begin_src yaml
  nextcloud-redis:
    image: redis:alpine
    container_name: 'nextcloud-redis'
    restart: always
#+end_src

** App1
#+begin_src yaml
  app1:
    container_name: "app1"
    image: nginx
    restart: always
    volumes:
      - ./app1/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./app1/www:/var/www:ro
    networks:
      - proxy-tier
#+end_src

** App2
#+begin_src yaml
  app2:
    container_name: "app2"
    image: nginx
    restart: always
    volumes:
      - ./app2/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./app2/www:/var/www:ro
    networks:
      - proxy-tier
#+end_src

** Plex
https://github.com/plexinc/pms-docker
#+begin_src yaml
  plex-media-server:
    container_name: 'plex-media-server'
    hostname: 'plex-media-server'
    image: plexinc/pms-docker
    restart: unless-stopped
    ports:
      - 32400:32400
    # env_file:
    #   - secrets/plex.env
    environment:
      - TZ=America/Toronto
    networks:
      - proxy-tier
#+end_src

** Hello World
#+begin_src yaml
  hello-world:
    container_name: "hello-world"
    image: nginx
    restart: always
    ports:
      - 8085:80
    networks:
      - proxy-tier
#+end_src

* Nginx Config
** Proxy
#+begin_src conf :tangle reverse-proxy/default.conf
upstream home-assistant {
    server homeassistant:8123;
}

upstream app1 {
    server app1:8080;
}

upstream app2 {
    server app2:8080;
    keepalive 32;
}

upstream nextcloud-server {
    server nextcloud-server:80;
}

upstream plex-media-server {
    server plex-media-server:32400;
}

#===============================================================================

server {
    listen       80;
    server_name  art-s.tplinkdns.com;

    # Do not HTTPS redirect Let's Encrypt ACME challenge
    location ^~ /.well-known/acme-challenge/ {
        auth_basic off;
        auth_request off;
        allow all;

        root /usr/share/nginx/html;
        try_files $uri =404;
        break;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen       443 ssl http2;
    server_name  art-s.tplinkdns.com;
    client_max_body_size 500M;
    send_timeout 100m;

    # ssl
    # ssl_session_timeout 5m;
    ssl_session_cache builtin:1000 shared:SSL:10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS-CHACHA20-POLY1305-SHA256:TLS-AES-256-GCM-SHA384:TLS-AES-128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_certificate /etc/nginx/certs/art-s.tplinkdns.com.crt;
    ssl_certificate_key /etc/nginx/certs/art-s.tplinkdns.com.key;
    ssl_dhparam /etc/nginx/certs/art-s.tplinkdns.com.dhparam.pem;
    ssl_trusted_certificate /etc/nginx/certs/art-s.tplinkdns.com.chain.pem;

    add_header Strict-Transport-Security max-age=15768000;
    add_header Referrer-Policy strict-origin-when-cross-origin;
    add_header X-Frame-Options deny;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    # add_header Permissions-Policy "geolocation=(self), midi=(self), sync-xhr=(self), microphone=(self), camera=(self), magnetometer=(self), gyroscope=(self), fullscreen=(self), payment=(self)";
    # # Pay attention to how many domains we need to allow
    # add_header Content-Security-Policy "default-src 'none'; base-uri 'self' art-s.tplinkdns.com; font-src 'self' data: art-s.tplinkdns.com; media-src 'self' data: blob: art-s.tplinkdns.com https://*.plex.direct:32400 https://video.internetvideoarchive.net https://*.cloudfront.net; script-src 'self' 'unsafe-inline' 'unsafe-eval' domain.com art-s.tplinkdns.com; style-src 'self' 'unsafe-inline' art-s.tplinkdns.com; img-src 'self' data: blob: https: art-s.tplinkdns.com; worker-src * blob:; frame-src 'self'; connect-src 'self' https: domain.com art-s.tplinkdns.com wss://*.plex.direct:32400 wss://pubsub.plex.tv; object-src 'self' art-s.tplinkdns.com; frame-ancestors 'self' domain.com art-s.tplinkdns.com; form-action 'self' art-s.tplinkdns.com; manifest-src 'self' art-s.tplinkdns.com; script-src-elem 'self' 'unsafe-inline' domain.com art-s.tplinkdns.com www.gstatic.com";

    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml application/xml text/javascript application/x-javascript image/svg+xml;
    gzip_disable "MSIE [1-6]\.";

    # HTTP 1.1 support
    proxy_http_version 1.1;
    proxy_set_header Host $host; # Forward real ip and host to Plex
    proxy_set_header X-Real-IP $remote_addr; # Forward real ip and host to Plex
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
    proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
    proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;

    # Disables compression between Plex and Nginx, required if using sub_filter below.
    # May also improve loading time by a very marginal amount, as nginx will compress anyway.
    #proxy_set_header Accept-Encoding "";

    # Mitigate httpoxy attack (see README for details)
    # proxy_set_header Proxy "";

    # Disable buffering - send to the client as soon as the data is received from Plex.
    proxy_redirect off;
    proxy_buffering off;

    location ~* ^/ha/(.*)$ {
        proxy_pass https://home-assistant/$1$is_args$args;
    }

    location ~* ^/app1/(.*)$ {
        proxy_pass http://app1/$1$is_args$args;
    }

    location ~* ^/app2/(.*)$ {
        proxy_pass http://app2/$1$is_args$args;
    }

    location ~* ^/nextcloud/(.*)$ {
        proxy_pass http://nextcloud-server/$1$is_args$args;
    }

    location ~* ^/plex/(.*)$ {
        proxy_pass http://plex-media-server/$1$is_args$args;

        # Set headers for Plex server.
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_ssl_verify off;
        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }

    location / {
        return 404;
    }
}
#+end_src

** App1
#+begin_src conf :tangle app1/default.conf
server {
    listen       8080;
    listen  [::]:8080;
    server_name  localhost;

    root /var/www;

    location / {
        index  index.html index.htm;
    }

    location /sub {
        index  sub.html;
    }
}
#+end_src

** App2
#+begin_src conf :tangle app2/default.conf
server {
    listen       8080;
    listen  [::]:8080;
    server_name  localhost;

    root /var/www;

    location / {
        index  index.html index.htm;
    }

    location /sub {
        index  sub.html;
    }
}
#+end_src

* index.html
** App1
#+begin_src html :tangle app1/www/index.html
<!DOCTYPE html>
<html>
  <head>
    <title>1st App!</title>
    <style>
      html {
        color-scheme: light dark;
      }
      body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
      }
      h1 {
        color: blue;
      }
    </style>
  </head>
  <body>
    <h1>App 1!</h1>
    <img src="logo.svg">
    <a href="sub/">Link</a>
    <p>
      If you see this page, the nginx web server is successfully installed and
      working. Further configuration is required.
    </p>

    <p>
      For online documentation and support please refer to
      <a href="http://nginx.org/">nginx.org</a>.<br />
      Commercial support is available at
      <a href="http://nginx.com/">nginx.com</a>.
    </p>

    <p><em>Thank you for using nginx.</em></p>
  </body>
</html>
#+end_src

#+begin_src html :tangle app1/www/sub/sub.html
<img src="../logo.svg">
OK 1
#+end_src

** App2
#+begin_src html :tangle app2/www/index.html
<!DOCTYPE html>
<html>
  <head>
    <title>2ns App!</title>
    <style>
      html {
        color-scheme: light dark;
      }
      body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
      }
      h1 {
        color: green;
      }
    </style>
  </head>
  <body>
    <h1>App 2!</h1>
    <img src="logo.svg">
    <a href="sub/">Link</a>
    <p>
      If you see this page, the nginx web server is successfully installed and
      working. Further configuration is required.
    </p>

    <p>
      For online documentation and support please refer to
      <a href="http://nginx.org/">nginx.org</a>.<br />
      Commercial support is available at
      <a href="http://nginx.com/">nginx.com</a>.
    </p>

    <p><em>Thank you for using nginx.</em></p>
  </body>
</html>
#+end_src

#+begin_src html :tangle app2/www/sub/sub.html
<img src="../logo.svg">
OK 2
#+end_src
